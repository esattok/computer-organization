
// CS224
// Lab No: 4
// Section No: 5
// Full Name: Esad İsmail Tök
// Bilkent ID: 21801679
// -----------------------------


// Testbench module to test the MIPS processor in which jr instruction is implemented

`timescale 1ns / 1ps

module testbench();
  
  // Code snipped to generate waveform
  initial begin
	$dumpfile("dump.vcd");
    $dumpvars(0);
  end
  
  // Defining the variables
  logic clk, reset, memwrite, alusrca, alusrcb, regwrite, branch, pcsrc, zero;
  logic [1:0] jump, memtoreg, aluop, regdst;
  logic [31:0] pc, instr, readdata, writedata, dataadr;
  
  
  // Instantiating the device under test
  new_top dut(clk, reset, memwrite, alusrca, alusrcb, regwrite, jump, branch,
             memtoreg, aluop, regdst, pc, instr, readdata, writedata, dataadr,
             pcsrc, zero);
  
  
  // Start testing with asserting the reset signal initially
  initial begin
    clk <= 0;
    reset <= 1; #10; 
    reset <= 0;
  end
  
  // Executing the tests using a for loop instead of an always block 
  // to avoid infinite loop
  initial begin
    for (int i = 0; i < 100; i++) begin
     	#10; clk = ~clk;
    end
  end
  
endmodule


// ------------------------------------------------------

// Controller module is changed to support jr instruction

module controller(input  logic[5:0] op, funct,
                  input  logic zero,
                  input  logic[31:0] aluout,
                  output logic[1:0]  memtoreg, aluop, regdst,
                  output logic memwrite,
                  output logic pcsrc, alusrca, alusrcb,
                  output logic regwrite,
                  output logic [1:0] jump,
                  output logic branch, 
                  output logic[2:0] alucontrol);

   logic isjr;
                  
  maindec md (op, isjr, memtoreg, memwrite, branch, alusrcb, regwrite, jump, aluop, regdst);

   aludec  ad (funct, aluop, alucontrol);

   assign pcsrc = (branch & zero);

   // Jump decleration
   assign isjr = (funct == 6'b001000);
  
   assign alusrca = (funct == 6'b000010); // If it is shift right logic

endmodule


// ------------------------------------------------------

// Main Decoder module is changed to support jr instruction

module maindec (input logic[5:0] op, 
                  input logic isjr,
                  output logic[1:0] memtoreg,
	              output logic memwrite, branch,
	              output logic alusrcb, regwrite,
                      output logic [1:0] jump,
	              output logic[1:0] aluop, regdst);
  logic [10:0] controls;

  assign {regwrite, regdst, alusrcb, branch, memwrite,
                memtoreg, aluop} = controls;

  always_comb
    case(isjr)
      1'b1: begin controls <= 10'b1_01_0_0_0_00_10; jump <= 2'b10; end // JR
      1'b0: case(op)
        6'b000000: begin controls <= 10'b1_01_0_0_0_00_10; jump <= 2'b00; end // R-type
        6'b100011: begin controls <= 10'b1_00_1_0_0_01_00; jump <= 2'b00; end // LW
        6'b101011: begin controls <= 10'b0_00_1_0_1_00_00; jump <= 2'b00; end // SW
        6'b000100: begin controls <= 10'b0_00_0_1_0_00_01; jump <= 2'b00; end // BEQ
        6'b001000: begin controls <= 10'b1_00_1_0_0_00_00; jump <= 2'b00; end // ADDI
        6'b000010: begin controls <= 10'b0_00_0_0_0_00_00; jump <= 2'b01; end // J
        6'b000011: begin controls <= 10'b1_10_0_0_0_10_00; jump <= 2'b01; end // JAL
        default:   begin controls <= 10'bx_x_x_x_x_xx_xx; jump <= 2'bxx; end // illegal op
    endcase
    endcase
endmodule


// ------------------------------------------------------

// Datapath module is changed to support jr instruction

module datapath (input  logic clk, reset, pcsrc, alusrca, alusrcb,
                 input  logic regwrite,
                 input logic [1:0] jump,
                 input  logic[1:0] memtoreg, regdst,
		         input  logic[2:0]  alucontrol, 
                 output logic zero, 
		         output logic[31:0] pc, 
	             input  logic[31:0] instr,
                 output logic[31:0] aluout, writedata, 
	             input  logic[31:0] readdata);

  logic [4:0]  writereg;
  logic [31:0] pcnext, pcnextbr, pcplus4, pcbranch;
  logic [31:0] signimm, signimmsh, rd1, srca, srcb, result;
 
  // next PC logic
  flopr #(32) pcreg(clk, reset, pcnext, pc);
  adder       pcadd1(pc, 32'b100, pcplus4);
  sl2         immsh(signimm, signimmsh);
  adder       pcadd2(pcplus4, signimmsh, pcbranch);
  mux2 #(32)  pcbrmux(pcplus4, pcbranch, pcsrc,
                      pcnextbr);
  
  mux4 #(32) pcmux(pcnextbr, {pcplus4[31:28], instr[25:0], 2'b00}, rd1, 32'b0, jump, pcnext); // New mux with 4 input

   // register file logic
   regfile     rf (clk, regwrite, instr[25:21], instr[20:16], writereg,
                   result, rd1, writedata);

  mux4 #(5)    wrmux (instr[20:16], instr[15:11], 5'h0001F, 0, regdst, writereg);
   signext         se (instr[15:0], signimm);
   
   mux4 #(32)  resmux (aluout, readdata, pcplus4, 32'b0, memtoreg, result);
   
   // ALU logic
   mux2 #(32)  srcamux (rd1, {27'b0, instr[10:6]}, alusrca, srca);
   mux2 #(32)  srcbmux (writedata, signimm, alusrcb, srcb);
   alu         alu (srca, srcb, alucontrol, aluout, zero);

endmodule



